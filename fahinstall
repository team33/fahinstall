#!/bin/bash -e
#
# fahinstall 2.28
# Folding@Home install script
# 

usage()
{
	echo Usage:
	echo -e \\t$0 [-U\|--no-update] [-R\|--root-override] [-F\|--no-fah] [-a\|--accept-eula] [-S\|--no-ssh] [-L\|--no-langouste] [-b \<branch\>\|--branch \<branch\>] [-t \<directory\>\|--tmpdir \<directory\>] [--fah-reconfigure] [--fah-username \<username\>] [--fah-team \<team-number\>\] [--fah-passkey \<passkey\>] [--fah-proxy-host \<proxy-host\>] [--fah-proxy-port \<proxy-port\>]
	echo -e \\t$0 -V\|--version
	echo -e \\t$0 -h\|--help
}

#
# download a file
# syntax: download <URL> [<output-file-name>]
#
download()
{
	local OUTFILE
	local TMPFILE

	[ -z "$1" ] && return 1
	[ -z "$2" ] && OUTFILE=$(basename "$1") || OUTFILE="$2"
	[ "$2" = "-" ] && TMPFILE=- || TMPFILE="$OUTFILE-$SUDO_USER.$$"
	if which curl > /dev/null 2>&1 ; then
		curl -f -s -S -R -L -o "$TMPFILE" "$1" || return $?
	else
		wget -nv -O "$TMPFILE" "$1" || return $?
	fi
	[ "$2" = "-" ] || mv "$TMPFILE" "$OUTFILE"
	return 0
}

eula_note()
{
	[ -n "$EULA_ACCEPTED" ] && return 0
	echo
	echo Download requires that you accept Folding@Home EULA.
	echo
	echo Press ENTER if you agree to Folding@Home EULA\'s terms. Otherwise press Ctrl+C.
	if ! read I ; then
		return 1
	fi
	EULA_ACCEPTED=1
	return 0
}

#
# execute command with external shell; retry if unsuccessful (up to 5 times total)
#
try()
{
	local I=5
	
	while true ; do
		$SHELL -c "$1" && return 0
		I=$(($I-1))
		[ $I = 0 ] && break
		echo ==== WARNING: "$1" failed, retrying in 5 seconds...
		sleep 5
		echo ==== Retrying now, this may take a while...
	done
	return 1
}

#
# sync dirty data to disk
# notify the user if syncing more than 10MB
#
sync()
{
	local DIRTY
	DIRTY=$(sed -rn '/^Dirty:/{s/^[^ ]* *([0-9]*).*$/\1/;p}' < /proc/meminfo)
	[ $DIRTY -gt 10240 ] && echo ==== Syncing, please wait...
	/bin/sync
	return $?
}

#
# Parse command-line options
#
OPT_VERSION=
OPT_USAGE=
OPT_NOUPDATE=
OPT_ROOTOVERRIDE=
OPT_NOFAH=
OPT_ACCEPTEULA=
OPT_NOSSH=
OPT_NOLANGOUSTE=
OPT_BRANCH=
OPT_TMPDIR=
OPT_FAHRECONFIGURE=
OPT_FAHUSERNAME=
OPT_FAHTEAM=
OPT_FAHPASSKEY=
OPT_FAHPROXYHOST=
OPT_FAHPROXYPORT=

OPT_NORMAL=
OPT_PRECONFIG=
OPT_PRECONFIG_PROXY=

while [ -n "$1" ]; do
	case $1 in
		(-V|--version)
			OPT_VERSION=1
			shift
			;;
		(-h|--help)
			OPT_USAGE=1
			shift
			;;
		(-U|--no-update)
			OPT_NOUPDATE=1
			shift
			;;
		(-R|--root-override)
			OPT_ROOTOVERRIDE=1
			shift
			;;
		(-F|--no-fah)
			OPT_NOFAH=1
			shift
			;;
		(-a|--accept-eula)
			OPT_ACCEPTEULA=1
			shift
			;;
		(-S|--no-ssh)
			OPT_NOSSH=1
			shift
			;;
		(-L|--no-langouste)
			OPT_NOLANGOUSTE=1
			shift
			;;
		(-b|--branch)
			OPTNAME=$1
			shift
			if [ -z "$1" -o "${1:0:1}" = "-" ]; then
				echo ERROR: option $OPTNAME requires an argument
				exit 1
			fi
			OPT_BRANCH=$1
			shift
			;;
		(-t|--tmpdir)
			OPTNAME=$1
			shift
			if [ -z "$1" -o "${1:0:1}" = "-" ]; then
				echo ERROR: option $OPTNAME requires an argument
				exit 1
			fi
			OPT_TMPDIR=$1
			shift
			;;
		(--fah-reconfigure)
			OPT_FAHRECONFIGURE=1
			shift
			;;
		(--fah-username)
			OPTNAME=$1
			shift
			if [ -z "$1" -o "${1:0:1}" = "-" ]; then
				echo ERROR: option $OPTNAME requires an argument
				exit 1
			fi
			OPT_FAHUSERNAME=$1
			shift
			;;
		(--fah-passkey)
			OPTNAME=$1
			shift
			if [ -z "$1" -o "${1:0:1}" = "-" ]; then
				echo ERROR: option $OPTNAME requires an argument
				exit 1
			fi
			OPT_FAHPASSKEY=$1
			shift
			;;
		(--fah-team)
			OPTNAME=$1
			shift
			if [ -z "$1" -o "${1:0:1}" = "-" ]; then
				echo ERROR: option $OPTNAME requires an argument
				exit 1
			fi
			OPT_FAHTEAM=$1
			shift
			;;
		(--fah-proxy-host)
			OPTNAME=$1
			shift
			if [ -z "$1" -o "${1:0:1}" = "-" ]; then
				echo ERROR: option $OPTNAME requires an argument
				exit 1
			fi
			OPT_FAHPROXYHOST=$1
			shift
			;;
		(--fah-proxy-port)
			OPTNAME=$1
			shift
			if [ -z "$1" -o "${1:0:1}" = "-" ]; then
				echo ERROR: option $OPTNAME requires an argument
				exit 1
			fi
			OPT_FAHPROXYPORT=$1
			shift
			;;
		(-*)
			echo ERROR: invalid option -- $1
			exit 1
			;;
		(*)
			break
			;;
	esac
done

if [ -n "$1" ]; then
	echo ERROR: excess argument -- $1
	exit 1
fi

#
# Set OPT_NORMAL if any regular (non -h -V) options are set
#
[ -n "$OPT_NOUPDATE" ] && OPT_NORMAL=1
[ -n "$OPT_ROOTOVERRIDE" ] && OPT_NORMAL=1
[ -n "$OPT_NOFAH" ] && OPT_NORMAL=1
[ -n "$OPT_ACCEPTEULA" ] && OPT_NORMAL=1
[ -n "$OPT_NOSSH" ] && OPT_NORMAL=1
[ -n "$OPT_NOLANGOUSTE" ] && OPT_NORMAL=1
[ -n "$OPT_BRANCH" ] && OPT_NORMAL=1
[ -n "$OPT_TMPDIR" ] && OPT_NORMAL=1
[ -n "$OPT_FAHRECONFIGURE" ] && OPT_NORMAL=1

#
# Count FAH preconfiguration options:
# - OPT_PRECONFIG of 111 means that username, team and passkey were provided
# - OPT_PRECONFIG_PROXY of 11 means that proxy host and proxy port were provided
#
[ -n "$OPT_FAHUSERNAME" ] && OPT_NORMAL=1 && OPT_PRECONFIG=1$OPT_PRECONFIG
[ -n "$OPT_FAHTEAM" ] && OPT_NORMAL=1 && OPT_PRECONFIG=1$OPT_PRECONFIG
[ -n "$OPT_FAHPASSKEY" ] && OPT_NORMAL=1 && OPT_PRECONFIG=1$OPT_PRECONFIG
[ -n "$OPT_FAHPROXYHOST" ] && OPT_NORMAL=1 && OPT_PRECONFIG_PROXY=1$OPT_PRECONFIG_PROXY
[ -n "$OPT_FAHPROXYPORT" ] && OPT_NORMAL=1 && OPT_PRECONFIG_PROXY=1$OPT_PRECONFIG_PROXY

#
# Check for command-line option conflicts
#
if [ -n "$OPT_VERSION$OPT_USAGE$OPT_NORMAL" -a "$OPT_VERSION$OPT_USAGE$OPT_NORMAL" != "1" ]; then
	echo ERROR: conflicting arguments
	exit 1
fi

#
# Ensure that proxy host and proxy port go together
#
if [ -n "$OPT_PRECONFIG_PROXY" -a "$OPT_PRECONFIG_PROXY" != "11" ]; then
	echo ERROR: --fah-proxy-host and --fah-proxy-port must be provided
	exit 1
fi

#
# Ensure that any --fah-* option is accompanied by username, team and passkey
#
if [ -n "$OPT_PRECONFIG$OPT_PRECONFIG_PROXY" -a "$OPT_PRECONFIG" != "111" ]; then
	echo ERROR: --fah-username, --fah-team and --fah-passkey must be provided if any --fah-"*" option is present
	exit 1
fi

#
# Process command-line options
#
[ -n "$OPT_USAGE" ] && usage && exit 0
[ -n "$OPT_VERSION" ] && echo fahinstall 2.28 && exit 0

EULA_ACCEPTED=
HARDOCP_BRANCH=released
TMPDIR=/tmp
FAHUSERNAME=Anonymous
FAHTEAM=0
FAHPASSKEY=
FAHPROXYACTIVE=no
FAHPROXYHOST=127.0.0.1
FAHPROXYPORT=8880

[ -n "$OPT_ACCEPTEULA" ] && EULA_ACCEPTED=$OPT_ACCEPTEULA
[ -n "$OPT_BRANCH" ] && HARDOCP_BRANCH=$OPT_BRANCH
[ -n "$OPT_TMPDIR" ] && TMPDIR=$OPT_TMPDIR

if [ "$OPT_PRECONFIG" = "111" ]; then
	FAHUSERNAME=$OPT_FAHUSERNAME
	FAHTEAM=$OPT_FAHTEAM
	FAHPASSKEY=$OPT_FAHPASSKEY
fi

if [ "$OPT_PRECONFIG_PROXY" = "11" ]; then
	FAHPROXYACTIVE=yes
	FAHPROXYHOST=$OPT_FAHPROXYHOST
	FAHPROXYPORT=$OPT_FAHPROXYPORT
fi

#
# Configure repositories
#
FAHBACKUP_REPO=https://raw.github.com/team33/fahbackup/$HARDOCP_BRANCH
FAHDIAG_REPO=https://raw.github.com/team33/fahdiag/$HARDOCP_BRANCH
FAHINSTALL_REPO=https://raw.github.com/team33/fahinstall/$HARDOCP_BRANCH
HFMINSTALL_REPO=https://raw.github.com/team33/hfminstall/$HARDOCP_BRANCH

#
# Produce appropriate message on premature exit
#
trap "echo Premature exit." ERR

#
# Start in home directory
#
cd

#
# Impose a requirement on script's name
#
if [ "$(basename $0)" != "fahinstall" ]; then
	echo ERROR: this code needs to be called as \'fahinstall\'
	exit 1
fi

if [ "$(id -ru)" != "0" ]; then
	echo ERROR: need root privileges. Run with sudo.
	exit 1
fi

if [ -n "$OPT_NOUPDATE" ]; then 
	echo ==== Not checking for updates
else
	echo ==== Checking for updates \($HARDOCP_BRANCH\)...
	download $FAHINSTALL_REPO/fahinstall "$TMPDIR/$(basename $0)-$SUDO_USER.$$"
	A=$(md5sum "$TMPDIR/$(basename $0)-$SUDO_USER.$$" | cut -f 1 -d \ )
	B=$(md5sum $0 | cut -f 1 -d \ )
	if [ "$A" != "$B" ]; then
		echo  NOTICE: newer version of fahinstall may be available
		echo "        and will be installed automatically"
		echo
		if [ -t 0 ]; then
			echo  Press Enter to proceed or Ctrl+C to exit.
			if ! read I ; then
				exit 1
			fi
		fi
		mv $0 $0-prev
		cp -a $0-prev $0
		cat "$TMPDIR/$(basename $0)-$SUDO_USER.$$" > $0
		rm "$TMPDIR/$(basename $0)-$SUDO_USER.$$"
		sync
		. $0 -b $HARDOCP_BRANCH -t "$TMPDIR" $([ -n "$OPT_ROOTOVERRIDE" ] && echo -R) $([ -n "$OPT_NOFAH" ] && echo -F) $([ -n "$OPT_ACCEPTEULA" ] && echo -a) $([ -n "$OPT_NOSSH" ] && echo -S) $([ -n "$OPT_NOLANGOUSTE" ] && echo -L) $([ -n "$OPT_FAHRECONFIGURE" ] && echo --fah-reconfigure) $([ "$OPT_PRECONFIG" = "111" ] && echo --fah-username $OPT_FAHUSERNAME --fah-team $OPT_FAHTEAM --fah-passkey $OPT_FAHPASSKEY) $([ "$OPT_PRECONFIG_PROXY" = "11" ] && echo --fah-proxy-host $OPT_FAHPROXYHOST --fah-proxy-port $OPT_FAHPROXYPORT)
		exit 0
	else
		rm "$TMPDIR/$(basename $0)-$SUDO_USER.$$"
	fi
fi

if [ -z "$SUDO_USER" ]; then
	echo ERROR: SUDO_USER variable not set, cannot continue.
	exit 1
fi

if [ "$SUDO_USER" = "fah" -o \( -z "$OPT_ROOTOVERRIDE" -a "$SUDO_USER" = "root" \) ]; then
	echo ERROR: user \'$SUDO_USER\' not supported. Create another user and try again.
	exit 1
fi

LC_SUDO_USER=$(echo $SUDO_USER | tr A-Z a-z)
if [ "$SUDO_USER" != "$LC_SUDO_USER" ]; then
	echo ERROR: user \'$SUDO_USER\' contains capital letters. Create user name without capital letters and try again.
	exit 1
fi

TARGET=$(eval echo ~$SUDO_USER/fah)


#install software
echo ==== Installing required software, this may take a few minutes ...
if which apt-get > /dev/null 2>&1 ; then
	PACKAGES_DEBIAN="screen samba mcelog pastebinit build-essential"
	if ! try "apt-get install -qq --no-upgrade $PACKAGES_DEBIAN" ; then
		# If installation fails -- update package indices and retry
		try "apt-get update -qq"
		try "apt-get install -qq --no-upgrade $PACKAGES_DEBIAN"
	fi
	try "apt-get install -qq --no-upgrade $(apt-cache --no-recommends --no-suggests --no-conflicts --no-breaks --no-replaces --no-enhances depends openssh-server |  awk '/Depends: [^<]/ { printf "%s ",$2 }')"
	try "apt-get install -qq --no-upgrade -o PackageManager::Configure=no -o DPkg::ConfigurePending=no openssh-server"
	[ -z "$OPT_NOSSH" ] && dpkg --configure --pending > /dev/null
fi
if which yum > /dev/null 2>&1 ; then
	yum -y -q install tar bzip2 screen samba mcelog gcc make yum-utils
	yum -y -q install $(repoquery --whatprovides  lsb-core-noarch --qf '%{name}' | uniq)
fi

echo ==== Applying OS tweaks ...

#
# Disable ondemand scaling governor
#
which update-rc.d > /dev/null 2>&1 && update-rc.d ondemand disable 2> /dev/null || true

#
# Disable irqbalance: try upstart, LSB and systemd methods
#
[ -f /etc/default/irqbalance ] && sed -i -e 's/^ENABLED.*$/ENABLED="0"/' /etc/default/irqbalance && sync
which chkconfig > /dev/null 2>&1 && chkconfig irqbalance off 2> /dev/null || true
which systemctl > /dev/null 2>&1 && systemctl disable irqbalance 2> /dev/null || true

#
# Update sysctl configuration
#
if [ -f /etc/sysctl.conf ]; then
	awk '/#\[H]ardOCP/ { next } /^# \[H]ardOCP begins/ { P = 1 } { if (P != 1) print } /^# \[H]ardOCP ends/ { P = 0 }' /etc/sysctl.conf > "$TMPDIR/sysctl.conf-$SUDO_USER.$$"
	if ! diff "$TMPDIR/sysctl.conf-$SUDO_USER.$$" /etc/sysctl.conf > /dev/null ; then
		mv "$TMPDIR/sysctl.conf-$SUDO_USER.$$" $(readlink -e /etc/sysctl.conf)
		sync
	fi
fi
if [ -d /etc/sysctl.d ]; then
	SYSCTL_CONF=/etc/sysctl.d/99-fah.conf
	echo -n > $SYSCTL_CONF
else
	SYSCTL_CONF=/etc/sysctl.conf
fi
echo "# [H]ardOCP begins" >> $SYSCTL_CONF
echo "kernel.randomize_va_space=0" >> $SYSCTL_CONF
echo "kernel.panic=3600" >> $SYSCTL_CONF
echo "kernel.print-fatal-signals=1" >> $SYSCTL_CONF
echo "kernel.sysrq=1" >> $SYSCTL_CONF
echo "kernel.core_uses_pid=1" >> "$SYSCTL_CONF"
echo "# [H]ardOCP ends" >> $SYSCTL_CONF
sync

# Disable automatic updates
if [ -f /etc/apt/apt.conf.d/10periodic ]; then
	awk '/^(APT::Periodic::Update-Package-Lists|APT::Periodic::Unattended-Upgrade) / { next } { print } END { print "APT::Periodic::Update-Package-Lists \"0\";" ; print "APT::Periodic::Unattended-Upgrade \"0\";" }' /etc/apt/apt.conf.d/10periodic > "$TMPDIR/10periodic-$SUDO_USER.$$"
	if ! diff "$TMPDIR/10periodic-$SUDO_USER.$$" /etc/apt/apt.conf.d/10periodic > /dev/null ; then
		mv "$TMPDIR/10periodic-$SUDO_USER.$$" $(readlink -e /etc/apt/apt.conf.d/10periodic)
		sync
	fi
fi

# Disable autostart of update notifier (Ubuntu)
if [ -f /etc/xdg/autostart/update-notifier.desktop ]; then
	awk '/^(NoDisplay|X-GNOME-Autostart-enabled)=/ { next } { print } END { print "NoDisplay=false" ; print "X-GNOME-Autostart-enabled=false" }' /etc/xdg/autostart/update-notifier.desktop > "$TMPDIR/update-notifier.desktop-$SUDO_USER.$$"
	if ! diff "$TMPDIR/update-notifier.desktop-$SUDO_USER.$$" /etc/xdg/autostart/update-notifier.desktop > /dev/null ; then
		mv "$TMPDIR/update-notifier.desktop-$SUDO_USER.$$" $(readlink -e /etc/xdg/autostart/update-notifier.desktop)
		sync
		killall update-notifier 2> /dev/null || true
	fi
fi

# Disable autostart of backup notifier (Ubuntu)
if [ -f /etc/xdg/autostart/deja-dup-monitor.desktop ]; then
	awk '/^(NoDisplay|X-GNOME-Autostart-enabled)=/ { next } { print } END { print "NoDisplay=false" ; print "X-GNOME-Autostart-enabled=false" }' /etc/xdg/autostart/deja-dup-monitor.desktop > "$TMPDIR/deja-dup-monitor.desktop-$SUDO_USER.$$"
	if ! diff "$TMPDIR/deja-dup-monitor.desktop-$SUDO_USER.$$" /etc/xdg/autostart/deja-dup-monitor.desktop > /dev/null ; then
		mv "$TMPDIR/deja-dup-monitor.desktop-$SUDO_USER.$$" $(readlink -e /etc/xdg/autostart/deja-dup-monitor.desktop)
		sync
		killall deja-dup-monitor 2> /dev/null || true
		killall deja-dup 2> /dev/null || true
	fi
fi

UPDATE_GRUB=
# update grub configuration: do not hide menu, decrease default timeout, use text mode
if [ -f /etc/default/grub ]; then
	cat /etc/default/grub | awk 'BEGIN { print "GRUB_TERMINAL=console" ; print "GRUB_TIMEOUT=5" ; print "GRUB_RECORDFAIL_TIMEOUT=30" } $1 ~ /^(GRUB_TERMINAL|GRUB_TIMEOUT|GRUB_RECORDFAIL_TIMEOUT|GRUB_HIDDEN_TIMEOUT|GRUB_HIDDEN_TIMEOUT_QUIET)(=.*$|$)/ { next } { print }' | sed -r '/^[[:space:]]*GRUB_CMDLINE_LINUX_DEFAULT[[:space:]]*=/{s/([[:space:]"])(splash)([[:space:]"])/\1\3/g;s/([[:space:]"])(quiet)([[:space:]"])/\1\3/g}' > "$TMPDIR/grub-$SUDO_USER.$$"
	if ! diff "$TMPDIR/grub-$SUDO_USER.$$" /etc/default/grub > /dev/null ; then
		cp --preserve /etc/default/grub /etc/default/grub-horde-$(date +%s).$$
		mv "$TMPDIR/grub-$SUDO_USER.$$" $(readlink -e /etc/default/grub)
		sync
		UPDATE_GRUB=1
	fi
fi

# Disable processing of debian theme in GRUB to prevent spurious
# "error: no video mode activated" -- LP #699802
if [ -x /etc/grub.d/05_debian_theme ]; then
	chmod -x /etc/grub.d/05_debian_theme
	UPDATE_GRUB=1
fi

# Update GRUB if any changes were made
if [ -n "$UPDATE_GRUB" ]; then
	if which update-grub > /dev/null 2>&1 ; then
		update-grub
	else
		cat /boot/grub2/grub.cfg > /dev/null
		grub2-mkconfig --output=/boot/grub2/grub.cfg
	fi
	sync
fi

#update fstab
echo ==== Configuring fstab...
grep -Ev "/fah[[:space:]]+tmpfs[[:space:]]" /etc/fstab > "$TMPDIR/fstab-$SUDO_USER.$$"

# if Linux version is <= 2.6.35, do not add mpol= tmpfs mount option
MPOL=,mpol=interleave
LINUX=$(uname -r | sed -r 's/([0-9\.]*)[^0-9\.].*/\1/;s/^([0-9]*)\.([0-9]*)\.([0-9]*).*/\1.\2.\3/;s/\./*65536+/;s/\./*256+/' | bc)
if [ $LINUX -le 132643 ]; then
	MPOL=
fi

echo "tmpfs  $TARGET  tmpfs  rw,uid=$(id -u $SUDO_USER),gid=$(id -g $SUDO_USER)$MPOL  0  0" >> "$TMPDIR/fstab-$SUDO_USER.$$"
grep selinux /proc/mounts > /dev/null && chcon $(ls --scontext /etc/fstab | cut -f 1 -d \ ) "$TMPDIR/fstab-$SUDO_USER.$$"
if ! diff "$TMPDIR/fstab-$SUDO_USER.$$" /etc/fstab > /dev/null ; then
	mv "$TMPDIR/fstab-$SUDO_USER.$$" $(readlink -e /etc/fstab)
	sync
fi

#get restore and backup scripts
echo ==== Setting up backup, restore and hfminstall scripts...
cd /usr/bin
rm -f fahbackup fahrestore hfminstall
download $FAHBACKUP_REPO/fahbackup
download $FAHBACKUP_REPO/fahrestore
download $HFMINSTALL_REPO/hfminstall
chmod +x fahbackup fahrestore hfminstall
cd

#
# Sanitize initial state -- delete fah directory if empty.
# This code is needed as fahbackup (by design) refuses to process empty directories.
# Having empty, non-tmpfs ~/fah directory would make us execute migration code
# and eventually fail.
#
echo ==== Checking if fah/tmpfs installations are required...
if [ -d "$TARGET" -a $(find "$TARGET" -mindepth 1 2> /dev/null | wc -l) = "0" ]; then
	umount "$TARGET" 2> /dev/null || true
	if fuser -v "$TARGET" &> /dev/null ; then
		echo ERROR: "$TARGET" is in use
		fuser -v "$TARGET"
		exit 1
	fi
	rm -r "$TARGET"
fi

if [ -d "$TARGET" ]; then
	#existing installation -- check if we need to migrate to tmpfs
	if ! grep -E "^[^ ]+ $TARGET tmpfs " /proc/mounts > /dev/null ; then
		echo ==== Migrating to tmpfs...
		if fuser -v "$TARGET" &> /dev/null ; then
			echo ERROR: "$TARGET" is in use
			fuser -v "$TARGET"
			exit 1
		fi

		su $SUDO_USER -c fahbackup
		sync
		rm -r "$TARGET"
		su $SUDO_USER -c "mkdir \"$TARGET\""
		mount "$TARGET"
		su $SUDO_USER -c fahrestore
	else
		mount "$TARGET" -o remount
	fi
else
	#fresh installation

	#create fah directory
	echo ==== Creating fah directory...
	su $SUDO_USER -c "mkdir \"$TARGET\""
	mount "$TARGET"
fi

[ -e /tmp/fah ] && chown -R $SUDO_USER:$(id -g $SUDO_USER) /tmp/fah

if [ -z "$OPT_NOLANGOUSTE" -a ! -f "$TARGET"/.nolangouste ]; then
	# Download and install Langouste
	echo ==== Installing Langouste...

	service langouste3 stop > /dev/null 2>&1 || true

	rm -fr "$TMPDIR/langouste3-$SUDO_USER.$$"
	mkdir "$TMPDIR/langouste3-$SUDO_USER.$$"
	cd "$TMPDIR/langouste3-$SUDO_USER.$$"
	download https://github.com/team33/langouste3/archive/$HARDOCP_BRANCH.tar.gz langouste3-$HARDOCP_BRANCH.tar.gz \
	|| download http://darkswarm.org/langouste3/langouste3-$HARDOCP_BRANCH.tar.gz langouste3-$HARDOCP_BRANCH.tar.gz \
	|| download http://54.229.149.213/langouste3/langouste3-$HARDOCP_BRANCH.tar.gz langouste3-$HARDOCP_BRANCH.tar.gz
	mkdir src
	cd src
	tar xzf ../*.tar.gz
	cd *
	make
	make install
	rm -r "$TMPDIR/langouste3-$SUDO_USER.$$"
	cd

	#
	# Remove Langouste startup from rc.local
	#
	if grep 'langouste3' /etc/rc.local > /dev/null 2>&1 ; then
		grep -v 'langouste3' /etc/rc.local > "$TMPDIR/rc.local-$SUDO_USER.$$"
		mv "$TMPDIR/rc.local-$SUDO_USER.$$" $(readlink -e /etc/rc.local)
		chmod +x /etc/rc.local
		sync
		killall langouste3 2> /dev/null || true
	fi


	#
	# remove links: first insserv, then update-rc.d, then rm
	#
	if which insserv > /dev/null 2>&1 ; then
		insserv -r langouste3 2> /dev/null || true
	fi

	if which update-rc.d > /dev/null 2>&1 ; then
		update-rc.d -f langouste3 remove
	fi

	rm -f /etc/rc*.d/*langouste3
	cp /usr/share/langouste3/initscript/langouste3 /etc/init.d/

	#
	# add links, try insserv and update-rc.d, if available
	#
	if which insserv > /dev/null 2>&1 ; then
		insserv langouste3
	elif which update-rc.d > /dev/null 2>&1 ; then
		update-rc.d langouste3 defaults
	else
		ln -fs /etc/init.d/langouste3 /etc/rc0.d/K10langouste3
		ln -fs /etc/init.d/langouste3 /etc/rc1.d/K10langouste3
		ln -fs /etc/init.d/langouste3 /etc/rc6.d/K10langouste3

		ln -fs /etc/init.d/langouste3 /etc/rc2.d/S90langouste3
		ln -fs /etc/init.d/langouste3 /etc/rc3.d/S90langouste3
		ln -fs /etc/init.d/langouste3 /etc/rc4.d/S90langouste3
		ln -fs /etc/init.d/langouste3 /etc/rc5.d/S90langouste3
	fi

	# Configure Langouste
	cat > "$TMPDIR/langouste3.conf-$SUDO_USER.$$" << EOF
#
# Langouste configuration file
# Details and examples can be found in /etc/langouste3/langouste3.conf.example
#
listen_port=8880
user=$SUDO_USER
EOF
	if [ -f /etc/langouste3/langouste3.conf ]; then
		grep -Ev '^[[:space:]]*(listen_port|user)[[:space:]]*=|^[[:space:]]*#|^[[:space:]]*$' /etc/langouste3/langouste3.conf 2> /dev/null | tr -d '\r' >> "$TMPDIR/langouste3.conf-$SUDO_USER.$$"
		if ! diff "$TMPDIR/langouste3.conf-$SUDO_USER.$$" /etc/langouste3/langouste3.conf > /dev/null ; then
			cp --preserve /etc/langouste3/langouste3.conf /etc/langouste3/langouste3.conf-horde-$(date +%s).$$
			mv "$TMPDIR/langouste3.conf-$SUDO_USER.$$" $(readlink -e /etc/langouste3/langouste3.conf)
			sync
		fi
	else
		cat >> "$TMPDIR/langouste3.conf-$SUDO_USER.$$" << EOF
enable_lazy_signals=1
EOF
		mv "$TMPDIR/langouste3.conf-$SUDO_USER.$$" /etc/langouste3/langouste3.conf
		sync
	fi

	cp /usr/share/langouste3/langouste-helper.sh "$TARGET"
	service langouste3 start
fi

if [ -z "$OPT_NOFAH" ]; then

	cd "$TARGET"

	#get fah files
	echo ==== Downloading F@H files...
	if [ ! -x fah6 ]; then
		echo "====     client"
		eula_note
		download "http://www.stanford.edu/group/pandegroup/folding/release/FAH6.34-Linux64-SMP.exe" fah6
		chmod +x fah6
	fi
	for i in a3 a4 a5 ; do
		if [ ! -x FahCore_$i.exe ]; then
			echo "====     FahCore_$i"
			eula_note
			download http://www.stanford.edu/~pande/Linux/AMD64/beta/Core_$i.fah - | dd skip=1 status=noxfer | bzip2 -cd > "$TMPDIR/FahCore_$i.exe-$SUDO_USER.$$"
			mv "$TMPDIR/FahCore_$i.exe-$SUDO_USER.$$" FahCore_$i.exe
			echo
		fi
	done
	chmod +x FahCore*
	chown -R $SUDO_USER:$(id -g $SUDO_USER) .

	if [ -n "$OPT_FAHRECONFIGURE" -a -f client.cfg ]; then
		su $SUDO_USER -c "sed -i 's/^extra_parms=.*$/extra_parms=-verbosity 9/' client.cfg"
	fi

	if [ ! -f client.cfg ]; then
		# preconfigure the client
		su $SUDO_USER -c "cat > client.cfg" << EOF
[settings]
username=$FAHUSERNAME
team=$FAHTEAM
passkey=$FAHPASSKEY
asknet=no
machineid=1
bigpackets=big
extra_parms=-verbosity 9

[http]
active=$FAHPROXYACTIVE
host=$FAHPROXYHOST
port=$FAHPROXYPORT

[clienttype]
type=3
EOF

		OPT_FAHRECONFIGURE=1
	fi
	if [ -n "$OPT_FAHRECONFIGURE" ]; then
		# add -smp/-bigadv as necessary
		CPUS=$(grep -c cpu[0-9] /proc/stat)
		[ $CPUS -gt 1 ] && su $SUDO_USER -c "sed -i 's/^extra_parms.*$/& -smp/' client.cfg"
		[ $CPUS -ge 24 ] && su $SUDO_USER -c "sed -i 's/^extra_parms.*$/& -bigadv/' client.cfg"

		if [ ! -t 0 -a "$OPT_PRECONFIG" != "111" ]; then
			echo ERROR: can\'t configure FAH, not running on a terminal
			exit 1
		fi
		if [ "$OPT_PRECONFIG" != "111" ]; then
			echo ==== Running F@H config...
			su $SUDO_USER -c "./fah6 -configonly" && exit 1 || RET=$?
			[ $RET != 143 ] && exit $RET
			echo
		fi
	fi

	cd
fi

# create work directory if it doesn't exist
[ ! -d "$TARGET/work" ] && su $SUDO_USER -c "mkdir $TARGET/work"

#
# Allow others (samba) to access work/ directory
#
chmod o+rx "$TARGET"/work

#
# Remove (old) [H]ardOCP-tagged lines from rc.local, if necessary
#
if grep '#\[H]ardOCP' /etc/rc.local > /dev/null 2>&1 ; then
	echo ==== Cleaning-up rc.local \([H]ardOCP\)...
	grep -v '#\[H]ardOCP' /etc/rc.local > "$TMPDIR/rc.local-$SUDO_USER.$$"
	mv "$TMPDIR/rc.local-$SUDO_USER.$$" $(readlink -e /etc/rc.local)
	chmod +x /etc/rc.local
	sync
fi

#
# Remove manually-added fahrestore from rc.local, if necessary
#
if grep 'fahrestore' /etc/rc.local > /dev/null 2>&1 ; then
	echo ==== Cleaning-up rc.local \(fahrestore\)...
	grep -v 'fahrestore' /etc/rc.local > "$TMPDIR/rc.local-$SUDO_USER.$$"
	mv "$TMPDIR/rc.local-$SUDO_USER.$$" $(readlink -e /etc/rc.local)
	chmod +x /etc/rc.local
	sync
fi

#create backup script in /etc/init.d and symlinks
echo ==== Setting up shutdown scripts...
cat > /etc/init.d/fahbackup-rc << EOF
#!/bin/sh -e
### BEGIN INIT INFO
# Provides:          fahbackup-rc
# Required-Start:    $local_fs
# Required-Stop:     $local_fs
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Restore fah backup on startup and back the client up on shutdown and reboot.
### END INIT INFO
if [ "\$1" = "start" ]; then
	su $SUDO_USER -c fahrestore
	touch /var/lock/subsys/fahbackup-rc 2> /dev/null || true
	sysctl -w vm.drop_caches=1 || true
	exit 0
fi
if [ "\$1" = "stop" ]; then
	su $SUDO_USER -c fahbackup
	while true ; do echo Data left to write: \$(sed -n '/^Dirty:/{s/^[^ ]* *//;p}' < /proc/meminfo)  ; sleep 1 ; done &
	rm -f /var/lock/subsys/fahbackup-rc
	exit 0
fi
echo Unknown command -- \$1 >&2
exit 1
EOF
chmod +x /etc/init.d/fahbackup-rc

#
# remove links: first insserv, then update-rc.d, then rm
#
if which insserv > /dev/null 2>&1 ; then
	insserv -r fahbackup-rc
fi

if which update-rc.d > /dev/null 2>&1 ; then
	update-rc.d -f fahbackup-rc remove
fi

rm -f /etc/rc*.d/*fahbackup-rc

#
# add links, try insserv and update-rc.d, if available
#
if which insserv > /dev/null 2>&1 ; then
	insserv fahbackup-rc
elif which update-rc.d > /dev/null 2>&1 ; then
	update-rc.d fahbackup-rc defaults
else
	ln -fs /etc/init.d/fahbackup-rc /etc/rc0.d/K10fahbackup-rc
	ln -fs /etc/init.d/fahbackup-rc /etc/rc1.d/K10fahbackup-rc
	ln -fs /etc/init.d/fahbackup-rc /etc/rc6.d/K10fahbackup-rc

	ln -fs /etc/init.d/fahbackup-rc /etc/rc2.d/S90fahbackup-rc
	ln -fs /etc/init.d/fahbackup-rc /etc/rc3.d/S90fahbackup-rc
	ln -fs /etc/init.d/fahbackup-rc /etc/rc4.d/S90fahbackup-rc
	ln -fs /etc/init.d/fahbackup-rc /etc/rc5.d/S90fahbackup-rc
fi

#set up cron job
echo ==== Setting up cron job...
(crontab -u $SUDO_USER -l 2> /dev/null | grep -v fahbackup || true) > "$TMPDIR/cron-$SUDO_USER.$$"
echo "00 * * * * fahbackup > /dev/null 2>&1"  >> "$TMPDIR/cron-$SUDO_USER.$$"
crontab -u $SUDO_USER "$TMPDIR/cron-$SUDO_USER.$$"
rm "$TMPDIR/cron-$SUDO_USER.$$"

#install thekraken
echo ==== Installing thekraken...
rm -fr "$TMPDIR/thekraken-$SUDO_USER.$$"
mkdir "$TMPDIR/thekraken-$SUDO_USER.$$"
cd "$TMPDIR/thekraken-$SUDO_USER.$$"
download https://github.com/team33/thekraken/archive/$HARDOCP_BRANCH.tar.gz thekraken-$HARDOCP_BRANCH.tar.gz \
|| download http://darkswarm.org/thekraken/thekraken-$HARDOCP_BRANCH.tar.gz thekraken-$HARDOCP_BRANCH.tar.gz
mkdir src
cd src
tar xzf ../*.tar.gz
cd *
make
make install
rm -r "$TMPDIR/thekraken-$SUDO_USER.$$"
cd

#wrap cores
echo ==== Wrapping cores...
cd "$TARGET"
su $SUDO_USER -c "thekraken -u -y" || true
su $SUDO_USER -c "thekraken -i -y"
cd

#
# Given that systemd recognizes a SysV service only after starting it,
# we need to fahbackup manually here; this means that, on Ubuntu, two
# backups will be performed, one here, and one at reboot
#
echo ==== Client setup done, backing up ...
su $SUDO_USER -c fahbackup

echo ==== Configuring samba...
#
# update smb.conf
#     security = share (no p/w required to connect)
#     usershare max shares = 100 (enable usershares)
#     usershare allow guests = yes
#
testparm -s | grep -Ev '^	security =|^	usershare max shares =|^	usershare allow guests =|^	guest account =' | sed -e "s/\[global]/&\n\tsecurity = share\n\tusershare max shares = 100\n\tusershare allow guests = yes\n\tguest account = $SUDO_USER/" > "$TMPDIR/smbconf-$SUDO_USER.$$"
grep selinux /proc/mounts > /dev/null && chcon $(ls --scontext /etc/samba/smb.conf | cut -f 1 -d \ ) "$TMPDIR/smbconf-$SUDO_USER.$$"
if ! diff "$TMPDIR/smbconf-$SUDO_USER.$$" /etc/samba/smb.conf > /dev/null ; then
	cp --preserve /etc/samba/smb.conf /etc/samba/smb.conf-horde-$(date +%s).$$
	mv "$TMPDIR/smbconf-$SUDO_USER.$$" $(readlink -e /etc/samba/smb.conf)
	sync
fi

#
# create usershares directory if it doesn't exist
#
if [ ! -d /var/lib/samba/usershares ]; then
	echo ==== Setting up samba usershares, this may take a few minutes ...
	groupadd -f sambashare
	mkdir -m 1770 /var/lib/samba/usershares
	chown root:sambashare /var/lib/samba/usershares
	grep selinux /proc/mounts > /dev/null && chcon $(ls --scontext -d /var/lib/samba | cut -f 1 -d \ ) /var/lib/samba/usershares
	grep selinux /proc/mounts > /dev/null && setsebool -P samba_enable_home_dirs 1
fi

# add the user to usershare group
usermod -a -G $(stat -c %G /var/lib/samba/usershares) $SUDO_USER

#
# restart samba, try Ubuntu, Fedora and Debian ways;
# additionally drop Fedora's 'stop' stdout so user
# doesn't get confused by potential '[FAILED]'
#
echo ==== Restarting samba...
service smbd stop 2> /dev/null || true
service smbd start 2> /dev/null || true
service smb stop 2> /dev/null > /dev/null || true
service smb start 2> /dev/null || true
service samba stop 2> /dev/null || true
service samba start 2> /dev/null || true

echo ==== Waiting for samba to start...
I=60
while ! netstat -tln | grep :445[^0-9] > /dev/null ; do
	I=$(($I-1))
	[ $I = -1 ] && false
	sleep 1
done

echo ==== Setting up fah share...
net usershare delete fah > /dev/null 2>&1 || true
su $SUDO_USER -c "net usershare add fah \"$TARGET\" \"\" \"Everyone:f\" \"guest_ok=y\""
chmod o+x $(eval echo ~$SUDO_USER)

# add the user to groups that own log files
[ -f /var/log/syslog ] && usermod -a -G $(stat -c %G /var/log/syslog) $SUDO_USER
[ -f /var/log/messages ] && usermod -a -G $(stat -c %G /var/log/messages) $SUDO_USER

#get fahdiag
echo ==== Installing fahdiag...
cd /usr/bin
rm -f fahdiag
download $FAHDIAG_REPO/fahdiag
chmod +x fahdiag
cd

# Finishing up...
echo
echo Your IP Address: $(ip route get 8.8.8.8 | sed -ne '{s/^.*src.//;p;q}')
echo Your machine name: $HOSTNAME
echo
echo Done. Reboot your system to complete configuration.
